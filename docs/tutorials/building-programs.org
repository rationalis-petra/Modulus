#+html_head: <link rel="stylesheet" href="../modulus-style.css" type="text/css"/>
#+title: Tutorial: Building Programs
#+options: toc:nil num:nil html-postamble:nil

#+html: <div style="text-align:right">
[[file:../index.org][Modulus]] / [[file:index.org][Tutorials]] / Building Programs
#+html: </div>

* Programs, Modules and Main
In the previous tutorial, [[file:expressions.org][expressions]], we made use of the REPL to evaluate
expressions like =2 + 2= and =3 + 4=. However, most code we write is part of a
program - code which is in a file somewhere and which, when executed, should do
something (e.g. browse the web, run a game, etc.). 

However, the tutorial so far has only covered how to calculate things things -
but if our program when run does a big calculation then stops, we won't have any
way of knowing what results it got! A program needs some way of taking input
from the world, and outputting results into the world. This is IO. 


** A First Program 
Let's write a first program: the venerable Hello World. Modulus programs are
arranged into files called modules. So, to start, create a file called
=main.mls= and put the line =(module main)= at the top. For the moment, this
line won't do much, but we can add to it later. Next, we need to tell modulus
what it should /do/ when the program is done. To do this, modulus looks for a
value called =main= which tells it what to do when the program is run. For now,
we just want to say hi, so write =(def main (put-line "Hello, World!"))=.
However, we don't have access to =put-line=, which is in a separate module
(=sys.console=). So, just above your =def main=, write =(open sys.console)=.
When you're done, the file should look like this:

#+begin_src modulus
(module main)

(open sys.console)

(def main (put-line "Hello, World!"))
#+end_src

To get this program to run, ⟨TODO: tooling⟩.


* Actions and The IO Type
So, we're now outputting `Hello, World!', but how does it work?. IO in Modulus
is based around the concept of an *action*. Unlike a function, which simply
calculates, an action represents an interaction with the outside world. Actions
which perform IO have type =IO A=, where A is the value an action outputs. For
example, the inverse of =put-line=, =get-line= has type =IO String=. This means
it does some IO (reads user input) and returns a String. =put-line=, meanwhile,
has a rather odd type: =String → IO Unit=. In other words, it is a /function/,
which takes a string as input, then returns an /action/ which has return type
=Unit=. This makes some degree of sense: =put-line "hello"= represents the
/action/ which outputs "hello", so what's with the =Unit= return type? =Unit= is
somewhat like =Bool=. If you see a =Bool=, it could be two values: =true= or
=false=. By contrast, if you see a =Unit=, it can be only one value, which is
written =()=. This makes sense: if you know an action returns Unit, then you
know it /must/ return the value =()=, and so the result is uninteresting - it
contains no information.


That's a lot of writing without much code, but I promise we'll get there soon.
So far, I've discussed singular actions: =print-line "hello"= or
=get-line=. What we need is a mechanism for /combining/ actions together into
larger actions, to say things like: "First print 'hello, world' then make a
beeping sound", or "Repeatedly read in lines from the console until the user
types 'exit'". Fortunately, we only really need three functions to do this:
=seq=, =bind= and =pure=.

** Sequencing
The first function in our list is =seq=. Seq represents the idea of "do x and
then do y". For example, we can first output "hello, world" then "goodbye,
world" with the code:

#+begin_src modulus
(module main)
(open sys.console)

(def main
  (seq (put-line "hello, world")
       (put-line "goodbye, world!")))
#+end_src

If you want to sequence more than two actions, then =seq= can be nested as follows:

#+begin_src modulus
(module main)
(open sys.console)

(def main
  (seq (put-line "hello, world")
       (seq (put-line "dum dee doo")
            (put-line "goodbye, world!"))))
#+end_src

This can get somewhat awkward (with many parentheses!) if you want to sequence
multiple actions, so =>>= is offered as an infix alternative. 

#+begin_src modulus
(module main)
(open sys.console)

(def main
  (put-line "hello, world" >> "dum dee doo" >> put-line "goodbye, world!"))
#+end_src

** Bind
Seq works for "do x then y", but we can't use it to express the idea "first do x
then use the results in y". For this we need =bind=. As an example program,
imagine we want to greet our user: first, we get their name, then we say hi:

#+begin_src perl
Bob         # user input
Hello, Bob! # program output
#+end_src

A naive attempt to write this program (one without =bind=) might look something
like:

#+begin_src modulus
(module main)
(open sys.console)

(greet : String → IO String)
(defn greet [name]
  (put-line ("hello, " ⋅ name ⋅ "!")))

(def main
  (greet get-line))
#+end_src

However, this code will not compile: it would return a type error. This is
because the "greet" function expects a =String= argument, but we're giving it an
=IO String=. Oops! 

In order to "correctly" write this function, we make a simple adjustment:  

#+begin_src modulus
(module main)
(open sys.console)

(greet : String → IO String)
(defn greet [name]
  (put-line ("hello, " ⋅ name ⋅ "!")))

(def main
  (bind put-line greet))
#+end_src

As with =seq=, it has an infix version, ~>>=~, which lets you write:

#+begin_src modulus
(module main)
(open sys.console)

(greet : String → IO String)
(defn greet [name]
  (put-line ("hello, " ⋅ name ⋅ "!")))

(def main (put-line >>= greet))
#+end_src

** Do Notation
Before moving to the final function, =pure=, I'll introduce a handy bit of
notation: =do= notation. To demonstrate why it's useful, let's first build a
relatively simple function: it will read in two lines, then combine them
together.

#+begin_src modulus
(def main 
  (get-line >>=
    (λ [line1] (get-line >>=
      (λ [line2] (put-line (line1 ⋅ line2)))))))
#+end_src

This function is somewhat difficult to read, and =bind= will only get more
unwieldy as we add more steps. With =do= notation, we can re-write this:

#+begin_src modulus
(def main
  (do (line1 ← get-line)
      (line2 ← get-line)
      (put-line (line1 ⋅ line2))))
#+end_src
 
** Pure


* Useful Functions
+ Unless

+ Until

+ Join

