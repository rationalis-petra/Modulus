#+html_head: <link rel="stylesheet" href="../modulus-style.css" type="text/css"/>
#+title: Tutorial: Collections
#+options: toc:nil num:nil html-postamble:nil

#+html: <div style="text-align:right">
[[file:../index.org][Modulus]] / [[file:index.org][Tutorials]] / Projects
#+html: </div>



* Types and Arrays
Modulus is a statically typed language. What this means is that it assigns a
type to everything in your program, and uses this to check for errors before
your program runs. A type is like a category of values - for example, =‚Ñ§= (which
you read 'Integer') is the type of values which are whole numbers. An equally
common type is =String=, which is a sequence of Characters. For example, "hello"
and "my name is chris" are both Strings. Modulus uses types to catch errors
before you run your program. As an example, suppose you write =pi + 2=,
expecting =pi= to hold the value =3.14159...=. However, someone decided to set
it to the string "pi". In this case, Modulus will report a /type error/,
because + expects both inputs to have the type =‚Ñ§=, but you gave it a
=String=.

The second topic of this tutorial is the /array/ which are a collection of
values. Arrays are written as a list of values between 'tortoise' brackets =‚¶ó‚¶ò=
(these have codes =;[‚Äã[= and =;]‚Äã]=, or =:left-tortoise= and
=:right-tortoise=). For example, the array containing the numbers 1, 2 and 3 is
written =‚¶ó1 2 3‚¶ò=. Arrays are =homogeneous=, which means that all values in an
array have the same type. Hence, while =‚¶ó1 2 3‚¶ò= and =‚¶ó"hello" "my" "name"‚¶ò= are
valid arrays, =‚¶ó1 "my" 3‚¶ò= is not, as it contains values with different
types. The type of an array is =Array= followed by the type of its'
contents. So, the type of =‚¶ó"hello" "bob"‚¶ò= is =Array String=.



* Functions
** The Function Type
In the last tutorial, we defined several functions to calculate values for
us. Below is a very simple function which adds 1 to a number - I've called it
=next=. 

#+begin_src modulus
> next n ‚âú n + 1
#+end_src

But what is the type of the =next= function?. Well, it can takes as input a whole
number, and return as output a whole number. This means we can give it type
=‚Ñ§ ‚Üí ‚Ñ§=, where the ‚Ñ§ on the left of the arrow represents the input, and the ‚Ñ§
on the right represents the output. More generally, we can construct a function
=A ‚Üí B=, which has input type 'A' and output type 'B'. As an example, the
function =even?=, which returns =True= when its' input is even and =False=
otherwise could have type =‚Ñ§ ‚Üí Bool=.

** Type Annotation
Sometimes it is useful to /annotate/ the inputs to a function 

** Currying
So, we've established that functions have type =A ‚Üí B=, where =A= is the /input/
type and =B= is the /output/ type. But, what if a function has more than one
input? Take for example the =add= function:

#+begin_src modulus
> add n m ‚âú n + m
#+end_src

While it may seem like it takes two inputs, =add= function here is pulling a
cheeky trick: it only takes 1! This means that =add 1=, =add 3= and =add 5= are
all completely ok expressions, as =add= only takes one argument. What the
/output/ of =add= is is another function, so the output of =add 1= is a function
equivalent to: =add-one m ‚âú 1 + m=. Similarly, the output of =add 3= is a
function equivalent to: =add-three m ‚âú 3 + m=. This means, for any value =n= we
provide as input, =add n= has type =‚Ñ§ ‚Üí ‚Ñ§=. Zooming out, we see that the
function =add= takes as input a =‚Ñ§=, and outputs a =‚Ñ§ ‚Üí ‚Ñ§=. Hence, the final
type of =add= is =‚Ñ§ ‚Üí (‚Ñ§ ‚Üí ‚Ñ§)=. You may recall that =‚Üí= is one of the few
exceptions to operator precedence - =‚Üí= is *right associative*, so =‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§=
is bracketed as =‚Ñ§ ‚Üí (‚Ñ§ ‚Üí ‚Ñ§)= *not* =(‚Ñ§ ‚Üí ‚Ñ§) ‚Üí ‚Ñ§=, as the former is what we want
to do most of the time.

While currying is relatively simple, it can be somewhat difficult to properly
internalize it, so if you don't normally, I would definitely recommend doing 
the [exercises] for this section.


** Polymorphism
Sometimes, simple types can be too restrictive. Take for instance the function
=id=, which does absolutely nothing:

#+begin_src modulus
> id x ‚âú x
#+end_src

What is the type of id? We could give it the type =‚Ñ§ ‚Üí ‚Ñ§=, but we could also
give it the type =String ‚Üí String=, or =Array ‚Ñ§ ‚Üí Array ‚Ñ§=. In fact, for any
type =A=, we can give =id= the type =A ‚Üí A=. Fortunately, Modulus lets us do
just this - we can add an argument =A=, which has the type =ùí∞= (U for Universe, 
the type of types), then tell Modulus that the type of =x= is A.

#+begin_src modulus
> id (A : ùí∞) (x : A) ‚âú x
#+end_src

Then, we can apply the function =id= to a type and a value of that type:

#+begin_src modulus
> id ‚Ñ§ 2
2
> id String "hello"
"hello"
> id Bool (2 < 3)
true
> id Bool 2
type error: expecting type Bool, but got type ‚Ñ§.
#+end_src

While quite useful, this can quickly get annoying: clearly, the type of "hello"
is =String=, so it seems somewhat pointless to type =id String "hello"=
. Fortunately, Modulus has a feature called /implicit arguments/, which is a way
of telling it to 'figure out' a specific input. We put these inside
curly-braces, so write:

#+begin_src modulus
> id {A : ùí∞} (x : A) ‚âú x 
#+end_src

To let Modulus know it should attempt to figure out the value of =A= based on
the value of =x=. Then, you can do:

#+begin_src modulus
> id 2
2
> id "hello"
hello
> id true
true
#+end_src


* Array Manipulation
One of the main uses for polymorphism is so we can write functions which work
for =Arrays= with any container type =A=. For example, the =append= function has
type: ={A:ùí∞} ‚Üí Array A ‚Üí Array A ‚Üí Array A=. This means it takes in 
+ a type A (implicit)
+ two arrays containing elements of type A
and outputs a new array containing elements of type =A=. For example:

#+begin_src modulus
> append ‚¶ó1 2 3‚¶ò ‚¶ó4 5 6‚¶ò
‚¶ó1 2 3 4 5 6‚¶ò
#+end_src

Append can also be written as an operator =‚ãÖ= (code =;*= or =:dot=).

#+begin_src modulus
> ‚¶ó"hello"‚¶ò ‚ãÖ ‚¶ó"bob"‚¶ò
‚¶ó"hello" "bob"‚¶ò
#+end_src

Another common thing we might want to do is apply some transformation to each
element of an array. This role is fulfilled by the =map= function. As a simple
example, suppose we want to add 1 to each element of an array:

#+begin_src modulus
> add1 x ‚âú x + 1
> map add1 ‚¶ó1 2 3‚¶ò
‚¶ó2 3 4‚¶ò
#+end_src

Alternatively, we might want to reverse each word in an array:

#+begin_src 
> map reverse ‚¶ó"the" "quick" "brown" "fox"‚¶ò
‚¶ó"eht" "kciuq" "nworb" "xof"‚¶ò
#+end_src

However, we don't have to keep the same type: =map= can change the type of the
array contents, for example from an array of integers to an array of booleans:

#+begin_src modulus
> map even? ‚¶ó1 2 3 4‚¶ò
‚¶ófalse true false true‚¶ò
#+end_src

This moves us to the type of the =map= function

#+begin_src modulus
map : {A : ùí∞} ‚Üí {B : ùí∞} ‚Üí (A ‚Üí B) ‚Üí Array A ‚Üí Array B
#+end_src



#+begin_src modulus
> defn add [x y] (x + y)
> fold add 0 ‚¶ó1 2 3‚¶ò
6
#+end_src

#+begin_src modulus
> foldl (+) 0 ‚¶ó1 2 3‚¶ò
#+end_src

#+begin_src modulus
> ((+) / 0) ‚¶ó1 2 3‚¶ò
#+end_src

#+begin_src modulus
> (+ / 0) ‚¶ó1 2 3‚¶ò
#+end_src

#+begin_src modulus
> + ‚ü®/ 0‚ü© ‚¶ó1 2 3‚¶ò
#+end_src

#+begin_src modulus
foldl : {A : ùí∞} ‚Üí {B : ùí∞} ‚Üí (B ‚Üí A ‚Üí B) ‚Üí Array A ‚Üí B ‚Üí Array B
#+end_src

#+begin_src modulus
foldl : {A B} ‚Üí (B ‚Üí A ‚Üí B) ‚Üí Array A ‚Üí B ‚Üí Array B
#+end_src

* Useful Array Functions
** Generating Arrays
#+begin_src 
> ‚ç≥ 10
‚¶ó0 1 2 3 4 5 6 7 8 9‚¶ò
#+end_src

# g ‚Æû f = f ‚àò g = f ‚Æú g
# f Ã≤$ x Ãà‚ãÖ 
# f ‚üõ x  
# f Ãà‚üõ x 

filter

#+begin_src modulus
> filter even? ‚¶ó‚¶ò
‚¶ó1 2 3‚¶ò ‚ßº‚óâ ,‚ßΩ ‚¶ó‚Åña ‚Åñb ‚Åñc‚¶ò
> ‚¶ó‚¶ó1 ‚Åña‚¶ò ‚¶ó1 ‚Åñb‚¶ò ‚¶ó1 ‚Åñc‚¶ò
   ‚¶ó2 ‚Åña‚¶ò ‚¶ó2 ‚Åñb‚¶ò ‚¶ó2 ‚Åñc‚¶ò
   ‚¶ó3 ‚Åña‚¶ò ‚¶ó3 ‚Åñb‚¶ò ‚¶ó3 ‚Åñc‚¶ò‚¶ò
#+end_src

filter

#+begin_src modulus
‚¶ó1 2 3‚¶ò ‚ü®‚óâ ,‚ü© ‚¶ó‚Åña ‚Åñb ‚Åñc‚¶ò
> ‚¶ó‚¶ó1 ‚Åña‚¶ò ‚¶ó1 ‚Åñb‚¶ò ‚¶ó1 ‚Åñc‚¶ò
   ‚¶ó2 ‚Åña‚¶ò ‚¶ó2 ‚Åñb‚¶ò ‚¶ó2 ‚Åñc‚¶ò
   ‚¶ó3 ‚Åña‚¶ò ‚¶ó3 ‚Åñb‚¶ò ‚¶ó3 ‚Åñc‚¶ò‚¶ò
#+end_src

inner-product

#+begin_src modulus
> ‚¶ó1 2 3‚¶ò ‚ü®‚äô ,‚ü© ‚¶ó‚Åña ‚Åñb ‚Åñc‚¶ò
‚¶ó(1, ‚Åña) (2, ‚Åñb) (3, ‚Åñc)‚¶ò
#+end_src

outer-product

#+begin_src modulus
‚¶ó1 2 3‚¶ò ‚ü®‚óâ ,‚ü© ‚¶ó‚Åña ‚Åñb ‚Åñc‚¶ò
> ‚¶ó‚¶ó1 ‚Åña‚¶ò ‚¶ó1 ‚Åñb‚¶ò ‚¶ó1 ‚Åñc‚¶ò
   ‚¶ó2 ‚Åña‚¶ò ‚¶ó2 ‚Åñb‚¶ò ‚¶ó2 ‚Åñc‚¶ò
   ‚¶ó3 ‚Åña‚¶ò ‚¶ó3 ‚Åñb‚¶ò ‚¶ó3 ‚Åñc‚¶ò‚¶ò
#+end_src

