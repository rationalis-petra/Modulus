#+html_head: <link rel="stylesheet" href="../modulus-style.css" type="text/css"/>
#+title: Tutorial: Modulus Expressions
#+options: toc:nil num:nil html-postamble:nil

#+html: <div style="text-align:right">
[[file:../index.org][Modulus]] / [[file:index.org][Tutorials]] / Expressions
#+html: </div>

* Arithmetic
<TODO: brief tooling>

When Programming, we often 

#+begin_src modulus
> 2 + 3
5
> 6 - 5
1
> 1.5 × 2.0
3.0
#+end_src

Shown above are a few arithmetic operations. Modulus for the most part looks
like other programming languages, except for the `×' symbol, used for
multiplication. Modulus offers two options for entering characters like
this. The first is to preceed the name of the operation with a colon, in this
case typing =:times= will output `×'. The other is abbreviated input, where
you use a semicolon. The abbreviated input for `×' is =;xx=.

* Booleans, Conditionals
Booleans are values which can be either true or false. The easiest way to get a
boolean is to just write =true= or =false=: 

#+begin_src modulus
> true
true
> false
false
#+end_src

More practically, booleans can be returned via comparison operations like =<=
and =>=.

#+begin_src modulus
> (2 < 3) ;; less than
true
> (2 ≤ 3) ;; less than or equal to ;<= 
true
> (2 = 3) ;; equal to
false
> (2 ≠ 3) ;; not equal to (;/= :not=)
true
> (5 > 3) ;; greater than
true
> (3 ≥ 3) ;; greater than or equal to ;>= 
true
#+end_src

There are also functions to combine booleans: 

#+begin_src modulus
> (true ∨ false) ;; or (;v, :or) is true if either argument is true  
true
> (true ∧ false) ;; and (;^, :and) is true only when both arguments ar etrue
false
> (true = false)
false
> (true ≠ false)
true
#+end_src


So that's all about how we /produce/ a boolean, but how to we /use/ them?  The
simplest way is to use =if=, which takes three arguments: a boolean, an
expression which is evaluated when the boolean is true, and an expression is
evaluated when the boolean is false.

#+begin_src modulus
> (if true "when-true" "when-false")
two
> (if (3 < 2) "when-true" "when-false")
when-false
#+end_src

# Sometimes, it might be necessary to have multiple 'if' statements inside of each
# other. Suppose for example that we have a calendar system where days are
# represented as numbers: 1 is Monday, 2 is Tuesday, etc. Using an =if=, this can
# get messy...

# #+begin_src modulus
# > def day 2
# > (if (day = 0)
#       "monday"
#       (if (day = 1)
#           "tuesday"
#            ...))
# #+end_src

# Fortunately, we have =cond=. =cond= will go through each condition (left of the
# →) until it finds a 'true' condition. The final condition (the =else=) acts as a
# 'fall-through', which is executed when all other conditions fail.

# #+begin_src modulus
# > def day 4
# > (cond
#     ((day = 1) → "Monday") 
#     ((day = 2) → "Tuesday") 
#     ((day = 3) → "Wednesday") 
#     ((day = 4) → "Thursday") 
#     ((day = 5) → "Friday") 
#     ((day = 6) → "Saturday") 
#     ((day = 7) → "Sunday") 
#     (else      → "Invalid Day"))
# "Thursday"
# #+end_src

* Naming Values



* Arrays
Modulus also allows you to group data together into structures called /arrays/,
which are like a list of values. You write arrays as a list of values between
'tortoise' brackets =⦗⦘=, which you type as =;[​[= and =;]​]=. For example, you
could construct the array =⦗1 2 3⦘=.

Arrays must contain elements which all have the same 'type'. A type is like a
category of things. Two common types are the type of Integers (whole numbers),
or the type of strings (words). This means that =⦗1 2 3⦘= and =⦗"apple"
"bannana" "orange"⦘= are valid arrays, but =⦗2 "apple" 10⦘= is not.

It's cool to be able to make an array, but what can we /do/ with them? For a
start, we can join them together with /append/, (also written `⋅' (=;**=)).

#+begin_src modulus
> ⦗1 2 3⦘ ⋅ ⦗4 5 6⦘
⦗1 2 3 4 5 6⦘
> append ⦗1 2 3⦘ ⦗4 5 6⦘
⦗1 2 3 4 5 6⦘
#+end_src



#+begin_src modulus
> defn add1 [x] (x + 1)
> map add1 ⦗1 2 3⦘
⦗2 3 4⦘
#+end_src

#+begin_src 
> map (+ 1) ⦗1 2 3⦘
⦗2 3 4⦘
#+end_src

#+begin_src 
> (+ 1) ¨ ⦗1 2 3⦘
⦗2 3 4⦘
#+end_src


#+begin_src modulus
> defn add [x y] (x + y)
> fold add 0 ⦗1 2 3⦘
6
#+end_src

#+begin_src modulus
> foldr (+) 0 ⦗1 2 3⦘
#+end_src

#+begin_src modulus
> ((+) / 0) ⦗1 2 3⦘
#+end_src

#+begin_src modulus
> (+ / 0) ⦗1 2 3⦘
#+end_src

#+begin_src modulus
> + ⟨/ 0⟩ ⦗1 2 3⦘
#+end_src

** Useful Array functions

filter

#+begin_src modulus
> defn even? [n] (n | 2 = 0)
⦗1 2 3⦘ ⟨◉ ,⟩ ⦗⁖a ⁖b ⁖c⦘
> ⦗⦗1 ⁖a⦘ ⦗1 ⁖b⦘ ⦗1 ⁖c⦘
   ⦗2 ⁖a⦘ ⦗2 ⁖b⦘ ⦗2 ⁖c⦘
   ⦗3 ⁖a⦘ ⦗3 ⁖b⦘ ⦗3 ⁖c⦘⦘
#+end_src

filter

#+begin_src modulus
⦗1 2 3⦘ ⟨◉ ,⟩ ⦗⁖a ⁖b ⁖c⦘
> ⦗⦗1 ⁖a⦘ ⦗1 ⁖b⦘ ⦗1 ⁖c⦘
   ⦗2 ⁖a⦘ ⦗2 ⁖b⦘ ⦗2 ⁖c⦘
   ⦗3 ⁖a⦘ ⦗3 ⁖b⦘ ⦗3 ⁖c⦘⦘
#+end_src

inner-product

#+begin_src modulus
> ⦗1 2 3⦘ ⟨⊙ ,⟩ ⦗⁖a ⁖b ⁖c⦘
⦗(1, ⁖a) (2, ⁖b) (3, ⁖c)⦘
#+end_src

outer-product

#+begin_src modulus
⦗1 2 3⦘ ⟨◉ ,⟩ ⦗⁖a ⁖b ⁖c⦘
> ⦗⦗1 ⁖a⦘ ⦗1 ⁖b⦘ ⦗1 ⁖c⦘
   ⦗2 ⁖a⦘ ⦗2 ⁖b⦘ ⦗2 ⁖c⦘
   ⦗3 ⁖a⦘ ⦗3 ⁖b⦘ ⦗3 ⁖c⦘⦘
#+end_src


