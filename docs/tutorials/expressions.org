#+html_head: <link rel="stylesheet" href="../modulus-style.css" type="text/css"/>
#+title: Tutorial: Expressions
#+options: toc:nil num:nil html-postamble:nil

#+html: <div style="text-align:right">
[[file:../index.org][Modulus]] / [[file:index.org][Tutorials]] / Expressions
#+html: </div>

* Arithmetic, Unicode
** Introduction
<TODO: brief tooling introduction>
<Introduction>

Let's warm up with some simple arithmetic:

#+begin_src modulus
> 2 + 3
5
> 6 - 5
1
> 1.5 × 2.0
3.0
> 5.0 ÷ 2.5
2.0
#+end_src

You'll notice some symbols that aren't available on your keyboard - notably, ×
and ÷. Modulus offers two options for entering characters like this. In Modulus,
you can type these characters in with special 'keycodes'. For the multiplication
(×) sign, there are two keycodes: ';x' and ':times'. For division, you can type
in ':divide' or ';:-'. Most characters have two different keycodes:
+ long-form e.g. :times for ×, :divide for ÷, :less-or-equal for ≤, etc. These
  are easy to remember but take a while to type in. Useful for symbols you don't
  use much. These are preceded by a colon `:` character
+ short-form e.g. ;x, ;:-, ;<= (≤), ;^= (≜). These can be harder to remember,
  but useful if you use a symbol very often.
 
There is a [table] documenting keycodes for particular symbols. These tutorials
will also provide the keycodes for symbols as they are introduced.


** Order of Operations
Depending on where you grew up, you likely had to memorize one of the acronyms
for the order of operations: BODMAS/BIMDAS/PEMDAS/etc. Modulus attempts to
simplify things by making the vast majority of operations left-associative with
equal precedence. In plain English, read from left-to-right, so the expression
=1 + 3 × 4 ÷ 6 - 2= is read as =((((1 + 3) × 4) ÷ 6) - 2)= instead of the more
'standard' =(1 + ((3 × 4) ÷ 6) - 2)=.

This can trip up newcomers to the language, but it was introduced for good
reason: Modulus has a very large number of operators, and forcing a programmer
to remember a huge precedence lists for all operators would be impractical.
There are a *VERY* small number of specific exceptions which were carefully
chosen only when it would be very inconvenient for them to adhere to the above
rule. These exceptions are '≜', '.', ':', and '→', and each will be explored
later.

* Naming Values, Functions
If we use some value repeatedly, it can be useful to give it a name. For
example, suppose we want to calculate the area of a circle with radius =2.5=. We can
use the formula $\pi \times r ^ 2$, using '^' for exponentiation, this is written:

#+begin_src modulus
> 3.14159 × (2.5 ^ 2)
19.6349375
#+end_src

So we know the area is about =19.63=.  Suppose now we want to calculate the
circumference: $2 \times \pi \times r$. This is

#+begin_src modulus
> 2 × 3.14159 × 2.5
15.70795
#+end_src

So we know the circumference is about =15.71=. It can be slightly tedious to
write out the value of $\pi$ each time, so we can give it a name with the ≜
symbol (;^= or :def-equal).

#+begin_src modulus
> pi ≜ 3.14159
#+end_src

Now, we can re-write the previous calculations using =pi=:

#+begin_src modulus
> pi × (2.5 ^ 2)
19.6349375
> 2 × pi × 2.5
15.70795
#+end_src

This is pretty handy, but what if we want to change the radius? For example, the
circumference and area of a circle with radius 3.2

#+begin_src modulus
> pi × (3.2 ^ 2)
32.2722816
> 2 × pi × 3.2
20.106176
#+end_src

To save us from having to write out the calculations each time, let's create a
function. A function describes a way to go from some input value to an output
value. In this case, the input value is the radius (which we'll call =r=), and
the output value is either the area or circumference. We can define the
functions for area and circumference as follows:

#+begin_src 
> area r ≜ pi × (r ^ 2)
> circumference r ≜ 2 × pi × r
#+end_src

It is worth noting that ≜ is considered a binary operator, and is one of the
very few exceptions mentioned in the 'order of operations' section. The key
difference is that '≜' always has the "loosest" binding, so you read =x ≜ 2 + 3=
as =x ≜ (2 + 3)= and not =(x ≜ 2) + 3=.

We can now calculate the area and circumference of a circle with radius 1.4.

#+begin_src 
> area 1.4
6.1771164
> circumference 1.4
8.824452
#+end_src

We say that in the expression =area 1.4= we are /applying/ the function =area=
to the value 1.4. It is worth noting that function application has a higher
precedence than binary operations. What this means is that you should read
=area 1.4 × 2= as =(area 1.4) × 2=, *not* as =area (1.4 × 2)=.

* Booleans, Conditionals
'Boolean' is the computer science term for something which can be either true or
false. The easiest way to get a boolean is to just write =true= or =false=:

#+begin_src modulus
> true
true
> false
false
#+end_src

More practically, booleans can be returned via comparison operations like =<=
and =>=.

#+begin_src modulus
> (2 < 3) ;; less than
true
> (2 ≤ 3) ;; less than or equal to (;<= :less-or-equal)
true
> (2 = 3) ;; equal to
false
> (2 ≠ 3) ;; not equal to (;/= :not=)
true
> (5 > 3) ;; greater than
true
> (3 ≥ 3) ;; greater than or equal to ;>= :greater-or-equal
true
#+end_src

There are also several ways of combining booleans, but the most useful are 'or'
(written ∨) and 'and' (written ∧).

#+begin_src modulus
> (true ∨ false) ;; or (;v, :or) is true if either argument is true  
true
> (true ∧ false) ;; and (;^, :and) is true only when both arguments ar etrue
false
#+end_src

The primary way we make use of a boolean is with =if=. An if has three parts: a
condition (boolean), something to return when the condition is true, and
something to return when the condition is false.

#+begin_src modulus
> (if true "true is true" "logic is broken! true is false")
true is true
> (if (3 < 2) "math is broken! 3 is less than 2" "3 is not less than 2")
3 is not less than 2
#+end_src

Using this, we could, for example, write a function which tells us whether a
number is positive or negative (keep in mind that 0 is neither positive or negative).

#+begin_src modulus
> (sign n ≜ if (n = 0) "neither" (if (n < 0) "negative" "positive"))
> sign 2
"positive"
> sign -1
"negative"
> sign 0
"neither"
#+end_src
