#+html_head: <link rel="stylesheet" href="../../../modulus-style.css" type="text/css"/>
#+title: Modulus Libraries: Array
#+options: toc:nil num:nil html-postamble:nil

#+html: <div style="text-align:right">
[[file:../../../index.org][Modulus]] / [[file:../../index.org][Documentation]] / [[../index.org][Library]] / [[file:index.org][Data Structures]] / Array
#+html: </div>

* Overview
* Outline
# todo: tree display
+ Types
  + =Array [A]=
+ Functions
  + =cons=
  + =snoc=
+ Instances
  + ={A} → Functor (Array A)=
  + ={A} → Applicative (Array A)=
  + ={A} → Monad (Array A)=
  + ={A} → Magma (Array A)=
  + ={A} → Semigroup (Array A)=
  + ={A} → Monoid (Array A)=
  + ={A} → Foldable (Array A)=
  + ={A} → Unfoldable (Array A)=
  + ={A} → Traversable (Array A)=
  + ={A} → Alternative (Array A)=
  + ={A} → ⦃Ord A⦄ → Ord (Array A)=
  + ={A} → ⦃Show A⦄ → Show (Array A)=

* List Seq
Implementation of the [Seq] signature for lists. [Seq] is a generalization
[Container] for data-structures where the elements have some kind of ordering.

** Monad

*** Functor
Array is a =functor=, and so implements =map=.

Map (binary =¨=) 

#+begin_src modulus
> map (+ 1) ⦗1 2 3⦘
⦗2 3 4⦘
#+end_src

*** Applicative
Array is an applicative, and so implements =pure= and =apply=.

#+begin_src modulus
> pure 3 
⦗3⦘
#+end_src

#+begin_src modulus
> apply ⦗(+1) (-1)⦘ ⦗1 2 3⦘
⦗2 3 4 0 1 2⦘
#+end_src

*** Monad
Monad 

Join

#+begin_src modulus
> join ⦗⦗1 2 3⦘ ⦗4 5 6⦘ ⦗7 8 9⦘⦘
⦗1 2 3 4 5 6 7 8 9⦘
#+end_src

Bind

#+begin_src modulus
> ⦗1 3 6⦘ >>= (λ [x] ⦗(x + 1) (x + 2) (x + 3)⦘)
⦗1 2 3 4 5 6 7 8 9⦘
#+end_src

** Monoid
*** Magma
*append/⋅*

*** Semigroup
+ assoc

*** Monoid
+ id
*empty/⦗⦘*

*** Group
+ invertibility
*append/⋅*

** Seq
*insert*

*find*

*fold*

*scan*

*index*

*outer product*

*inner product*

*filter*

*stencil/mask*

*join*

*take*

*drop*


* List Monoid
Implementation of the [monoid] signature for lists. Note that [monoid] is a
supertype of [groupoid] and [magma]. 

*Append, ⋅*. =append x y=  

*empty, ⦗⦘* 

* List Internals

#+begin_src 
#+end_src
